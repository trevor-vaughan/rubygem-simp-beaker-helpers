---
HOSTS:
  vboxwrapper:
    roles:
      - primary
    platform: el-7-x86_64
    hypervisor: docker
    image: centos:7
    docker_cmd: '/usr/sbin/sshd -D -E /var/log/sshd.log'
    docker_preserve_image: true
    docker_options:
      # Required for IPTables manipulation
      - '--privileged'
    docker_image_commands:
      # The following 2 commands are intended to solve the problem in
      # https://github.com/CentOS/sig-cloud-instance-images/issues/15.
      # However, sometimes these commands cause yum problems, instead
      # of fixing yum problems.  If the install of yum-plugin-ovl and
      # yum-utils fails, try commenting out these commands.
      - 'yum clean all'
      - 'rm -f /var/lib/rpm/__db*'
      - 'yum clean all'
      # This is a hack to force an exit code of 0
      # Sometimes yum-plugin-ovl will install dependencies, which will fail with rpmdb errors
      # since yum-plugin-ovl is not installed (chicken and egg)
      - 'yum install -y yum-plugin-ovl || :'
      - 'yum install -y yum-utils'

      # Work around bug https://bugzilla.redhat.com/show_bug.cgi?id=1217477
      - 'yum --enablerepo=updates --enablerepo=base update -y git curl nss'

      # Getting rid of package conflicts
      - 'yum remove -y fakesystemd'
      - '\cp -a /etc/ssh /root'
      - 'yum install -y openssh-server'
      - '\cp -a /root/ssh /etc'

      # Work around bugs in beaker-docker
      # https://github.com/puppetlabs/beaker-docker/pull/15
      - 'yum install -y sudo'
      - "sed -ri 's/^#?PermitRootLogin .*/PermitRootLogin yes/' /etc/ssh/sshd_config"
      - "sed -ri 's/^#?PasswordAuthentication .*/PasswordAuthentication yes/' /etc/ssh/sshd_config"
      - "sed -ri 's/^#?UseDNS .*/UseDNS no/' /etc/ssh/sshd_config"

      # Allow the build user to perform privileged operations
      - "echo 'Defaults:build_user !requiretty' >> /etc/sudoers"
      - "echo 'build_user ALL=(ALL) NOPASSWD: ALL' >> /etc/sudoers"

      # Add the build user
      - 'useradd -b /home -G wheel -m -c "Build User" -s /bin/bash -U build_user'

      # No limits
      - 'rm -rf /etc/security/limits.d/*.conf'

      # simp build-deps
      - 'yum-config-manager --enable extras'
      - 'yum install -y epel-release'
      - 'yum install -y openssl util-linux rpm-build augeas-devel createrepo genisoimage git gnupg2 libicu-devel libxml2 libxml2-devel libxslt libxslt-devel rpmdevtools which ruby-devel rpm-devel rpm-sign'

      # RVM build-deps
      - 'yum install -y libyaml-devel glibc-headers autoconf gcc gcc-c++ glibc-devel readline-devel libffi-devel automake libtool bison sqlite-devel'

      # For things that want to call systemctl - we don't need them for this
      - 'ln -sf /bin/true /usr/bin/systemctl'

      # Puppet Deps
      - 'yum install -y ntpdate rubygems'

      # VirtualBox
      - 'yum -y install make epel-release initscripts && yum -y install dkms'
      - 'curl http://download.virtualbox.org/virtualbox/rpm/el/virtualbox.repo -o /etc/yum.repos.d/virtualbox.repo'
      - 'yum -y install $(yum -y list | grep VirtualBox | sort | tail -1 | cut -f 1 -d " ")'

      # Vagrant
      - 'yum -y install https://releases.hashicorp.com/vagrant/2.2.3/vagrant_2.2.3_x86_64.rpm'
      - 'VERSION=$(VBoxManage --version | tail -1 | cut -f 1 -d "r") && curl -Lo ${TMPDIR}/Oracle_VM_VirtualBox_Extension_Pack-${VERSION}.vbox-extpack http://download.virtualbox.org/virtualbox/${VERSION}/Oracle_VM_VirtualBox_Extension_Pack-${VERSION}.vbox-extpack && yes | VBoxManage extpack install ${TMPDIR}/Oracle_VM_VirtualBox_Extension_Pack-${VERSION}.vbox-extpack && rm -rf ${TMPDIR}/Oracle_VM_VirtualBox_Extension_Pack-${VERSION}.vbox-extpack'
      - 'usermod -a -G vboxusers build_user'

      # RVM

      #
      # Do our best to get one of the keys from at one of the servers, and to
      # trust the right ones if the GPG keyservers return bad keys
      #
      # These are the keys we want:
      #
      #  409B6B1796C275462A1703113804BB82D39DC0E3 # mpapis@gmail.com
      #  7D2BAF1CF37B13E2069D6956105BD0E739499BDB # piotr.kuczynski@gmail.com
      #
      # See:
      #   - https://rvm.io/rvm/security
      #   - https://github.com/rvm/rvm/blob/master/docs/gpg.md
      #   - https://github.com/rvm/rvm/issues/4449
      #   - https://github.com/rvm/rvm/issues/4250
      #   - https://seclists.org/oss-sec/2018/q3/174
      #
      # NOTE (mostly to self): In addition to RVM's documented procedures,
      # importing from https://keybase.io/mpapis may be a practical
      # alternative for 409B6B1796C275462A1703113804BB82D39DC0E3:
      #
      #    curl https://keybase.io/mpapis/pgp_keys.asc | gpg2 --import
      #
      - 'runuser build_user -l -c "for i in {1..5}; do { gpg2 --keyserver hkp://pgp.mit.edu --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 || gpg2 --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3; } && { gpg2 --keyserver hkp://pgp.mit.edu --recv-keys 7D2BAF1CF37B13E2069D6956105BD0E739499BDB || gpg2 --keyserver hkp://keys.gnupg.net --recv-keys 7D2BAF1CF37B13E2069D6956105BD0E739499BDB; } && break || sleep 1; done"'
      - 'runuser build_user -l -c "gpg2 --refresh-keys"'
      - 'runuser build_user -l -c "curl -sSL https://raw.githubusercontent.com/rvm/rvm/stable/binscripts/rvm-installer -o rvm-installer && curl -sSL https://raw.githubusercontent.com/rvm/rvm/stable/binscripts/rvm-installer.asc -o rvm-installer.asc && gpg2 --verify rvm-installer.asc rvm-installer && bash rvm-installer"'

      - 'runuser build_user -l -c "rvm install 2.4.4 --disable-binary"'
      - 'runuser build_user -l -c "rvm use --default 2.4.4"'
      - 'runuser build_user -l -c "rvm all do gem install bundler -v \"~> 1.16\" --no-document"'

      # Add some gems that will drag along 90% of what the build requires
      - 'runuser build_user -l -c "rvm use default; gem install --no-document simp-rake-helpers"'
      - 'runuser build_user -l -c "rvm use default; gem install --no-document json"'
      - 'runuser build_user -l -c "rvm use default; gem install --no-document charlock_holmes"'
      - 'runuser build_user -l -c "rvm use default; gem install --no-document posix-spawn"'

CONFIG:
  log_level: verbose
  type: aio
